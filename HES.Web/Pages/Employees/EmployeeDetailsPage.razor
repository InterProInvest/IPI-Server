@page "/Employees/Details/{EmployeeId}"
@attribute [Authorize(Roles = ApplicationRoles.AdminRole)]
@inherits OwningComponentBase

@if (Initialized)
{
    <div class="row align-items-center details-card mb-3">
        <div class="col">
            <h1 class="text-navyblue text-break m-0">@Employee?.FullName</h1>
        </div>
        @*<div class="col-auto pl-1 pr-1">
                <ButtonSpinner Class="btn-primary" Text="Add Software Vault" Callback="OpenModalAddSoftwareVaultAsync" />
            </div>*@
        <div class="col-auto pl-1 pr-1">
            <button type="button" @onclick="OpenDialogAddHardwareVaultAsync" class="btn btn-primary" title="@(Employee.HardwareVaults.Count > 0 ? "Cannot add more than one hardware vault." : "")" disabled="@(Employee.HardwareVaults.Count > 0)">
                Add Hardware Vault
            </button>
        </div>
        <div class="col-auto pl-1 pr-1">
            <ButtonSpinner Class="btn btn-primary" Text="Create Personal Account" Callback="OpenDialogCreatePersonalAccountAsync" />
        </div>
        <div class="col-auto pl-1">
            <ButtonSpinner Class="btn btn-primary" Text="Add Shared Account" Callback="OpenDialogAddSharedAccountAsync" />
        </div>
    </div>
    <section>
        @if (Employee.SoftwareVaultInvitations.Count > 0 || Employee.SoftwareVaults.Count > 0 || Employee.HardwareVaults.Count > 0)
        {
            <h4 class="text-navyblue">Vaults</h4>
            <ul class="list-group w-100 mb-3">
                @foreach (var invitation in Employee.SoftwareVaultInvitations.Where(x => x.Status != SoftwareVaultInvitationStatus.Accepted))
                {
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        <div class="d-flex align-items-center">
                            <img class="mr-1" src="/svg/icon-mail-sent.svg" />
                            Software Vault Invite sent @invitation.CreatedAt.ToShortDateString() - @invitation.Status
                        </div>
                        <div>
                            <button type="button" class="btn btn-light border my-1 mr-2" title="Resend invitation" @onclick="@(() => OpenDialogResendInvitationAsync(invitation))">
                                <img class="icon-btn" src="/svg/icon-email.svg" />
                                Resend
                            </button>
                            <button type="button" class="btn btn-light border my-1 mr-2" title="Delete invitation" @onclick="@(() => OpenDialogDeleteInvitationAsync(invitation))">
                                <img class="icon-btn" src="/svg/icon-delete.svg" />
                                Delete
                            </button>
                        </div>
                    </li>
                }
                @foreach (var softwareVault in Employee.SoftwareVaults)
                {
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        <div class="d-flex align-items-center">
                            <img src="/svg/icon-software-vault.svg" />
                            <span class="font-weight-bold">@softwareVault.Model</span> - @(softwareVault.LicenseEndDate != null ? $"License till {softwareVault.LicenseEndDate.Value.ToShortDateString()}" : "License status None") - @softwareVault.Status
                        </div>
                        <div>
                            <button type="button" class="btn btn-light border my-1 mr-2" title="Software Vault Details" @onclick="@(() => OpenDialogSoftwareVaultDetailsAsync(softwareVault))">
                                <img class="icon-btn" src="/svg/icon-details.svg" />
                                Details
                            </button>
                        </div>
                    </li>
                }
                @foreach (var hardwareVault in Employee.HardwareVaults)
                {
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        <div class="d-flex align-items-center">
                            <img class="mr-1" src="/svg/icon-hardware-vault.svg" />
                            <span class="font-weight-bold mr-1">@hardwareVault.Id</span>
                            <span class="mr-1">- @(hardwareVault.Status)</span>
                            <span class="mr-2">- @(hardwareVault.LicenseEndDate != null ? $"License till {hardwareVault.LicenseEndDate.Value.ToShortDateString()}" : "License status None")</span>
                            @if (hardwareVault.NeedSync)
                            {
                                <span class="badge badge-primary mr-2">Need Sync</span>
                            }
                            @if (hardwareVault.IsOnline)
                            {
                                <span class="badge badge-success mr-2">Online</span>
                            }
                        </div>
                        <div>
                            @if (hardwareVault.Status == VaultStatus.Suspended || hardwareVault.Status == VaultStatus.Reserved)
                            {
                                <button type="button" @onclick="@(async () => await OpenDialogShowActivationCodeAsync(hardwareVault))" class="btn btn-light border mx-1" title="Show activation code">
                                    <img class="icon-btn" src="/svg/icon-security.svg" />
                                    Activation code
                                </button>
                            }
                            <button type="button" class="btn btn-light border mx-2" title="Hardware Vault Details" @onclick="@(async () => await OpenDialogHardwareVaultDetailsAsync(hardwareVault))">
                                <img class="icon-btn" src="/svg/icon-details.svg" />
                                Details
                            </button>
                            <button type="button" class="btn btn-light border mx-2" title="Remove hardware vault from employee" @onclick="async () => await OpenDialogRemoveHardwareVaultAsync(hardwareVault)">
                                <img class="icon-btn" src="/svg/icon-delete.svg" />
                                Remove
                            </button>
                        </div>
                    </li>
                }
            </ul>
        }
    </section>
    <section>
        @if (MainTableService.Entities.Count > 0)
        {
            <TableAction>
                <ActionButtons>
                    <h4 class="text-navyblue mr-2">Accounts</h4>
                    @if (MainTableService.SelectedEntity != null)
                    {
                        @if (MainTableService.SelectedEntity.Employee.PrimaryAccountId != MainTableService.SelectedEntity.Id)
                        {
                            <button type="button" @onclick="OpenDialogSetAsWorkstationAccountAsync" class="btn btn-light border" title="Set as primary account">
                                <img class="icon-btn" src="/svg/icon-star.svg" />
                                Set as primary
                            </button>
                        }
                        @if (MainTableService.SelectedEntity.Type == AccountType.Personal)
                        {
                            <button type="button" @onclick="OpenDialogEditPersonalAccountAsync" class="btn btn-light border mx-2" title="Edit personal account">
                                <img class="icon-btn" src="/svg/icon-edit.svg" />
                                Edit
                            </button>
                            <button type="button" @onclick="OpenDialogEditPersonalAccountPasswordAsync" class="btn btn-light border mx-2" title="Edit personal account password">
                                <img class="icon-btn" src="/svg/icon-password.svg" />
                                Edit password
                            </button>
                            @if (MainTableService.SelectedEntity.Kind != AccountKind.Workstation)
                            {
                                <button type="button" @onclick="OpenDialogEditPersonalAccountOtpAsync" class="btn btn-light border mx-2" title="Edit personal account OTP">
                                    <img class="icon-btn" src="/svg/icon-otp.svg" />
                                    Edit OTP
                                </button>
                            }
                            @if (Employee.ActiveDirectoryGuid != null && MainTableService.SelectedEntity.Login.Split(@"\")[0].Contains(LdapHost ?? string.Empty, StringComparison.OrdinalIgnoreCase))
                            {
                                <button type="button" @onclick="OpenDialogGenerateAdPasswordAsync" class="btn btn-light border mx-2" title="Generate Active Directory Password">
                                    <img class="icon-btn" src="/svg/icon_random.svg" />
                                    Generate Password
                                </button>
                            }
                        }
                        <button type="button" @onclick="OpenDialogDeleteAccountAsync" class="btn btn-light border mx-2" title="Delete account">
                            <img class="icon-btn" src="/svg/icon-delete.svg" />
                            Delete
                        </button>
                    }
                </ActionButtons>
                <FilterButtons>
                    <TableFilter EnableFilterButton="false" SearchTextChanged="MainTableService.SearchTextChangedAsync" />
                </FilterButtons>
            </TableAction>
            <MainTable Items="MainTableService.Entities" SelectedItem="MainTableService.SelectedEntity" SelecedItemChanged="MainTableService.SelectedItemChangedAsync" Loading="MainTableService.Loading">
                <TableHeader>
                    <MainTableHeader Title="Name"
                                     TitleWidth="7.1"
                                     SortColumn="@nameof(Account.Name)"
                                     CurrentSortedColumn="@MainTableService.DataLoadingOptions.SortedColumn"
                                     CurrentSortDirection="@MainTableService.DataLoadingOptions.SortDirection"
                                     SortedColumnChanged="MainTableService.SortedColumnChangedAsync"
                                     SortDirectionChanged="MainTableService.SortDirectionChangedAsync" />
                    <MainTableHeader Title="Urls"
                                     TitleWidth="7.1"
                                     SortColumn="@nameof(Account.Urls)"
                                     CurrentSortedColumn="@MainTableService.DataLoadingOptions.SortedColumn"
                                     CurrentSortDirection="@MainTableService.DataLoadingOptions.SortDirection"
                                     SortedColumnChanged="MainTableService.SortedColumnChangedAsync"
                                     SortDirectionChanged="MainTableService.SortDirectionChangedAsync" />
                    <MainTableHeader Title="Apps"
                                     TitleWidth="7.1"
                                     SortColumn="@nameof(Account.Apps)"
                                     CurrentSortedColumn="@MainTableService.DataLoadingOptions.SortedColumn"
                                     CurrentSortDirection="@MainTableService.DataLoadingOptions.SortDirection"
                                     SortedColumnChanged="MainTableService.SortedColumnChangedAsync"
                                     SortDirectionChanged="MainTableService.SortDirectionChangedAsync" />
                    <MainTableHeader Title="Login"
                                     TitleWidth="7.1"
                                     SortColumn="@nameof(Account.Login)"
                                     CurrentSortedColumn="@MainTableService.DataLoadingOptions.SortedColumn"
                                     CurrentSortDirection="@MainTableService.DataLoadingOptions.SortDirection"
                                     SortedColumnChanged="MainTableService.SortedColumnChangedAsync"
                                     SortDirectionChanged="MainTableService.SortDirectionChangedAsync" />
                    <MainTableHeader Title="Type"
                                     TitleWidth="7.1"
                                     SortColumn="@nameof(Account.Type)"
                                     CurrentSortedColumn="@MainTableService.DataLoadingOptions.SortedColumn"
                                     CurrentSortDirection="@MainTableService.DataLoadingOptions.SortDirection"
                                     SortedColumnChanged="MainTableService.SortedColumnChangedAsync"
                                     SortDirectionChanged="MainTableService.SortDirectionChangedAsync" />
                    <MainTableHeader Title="Created"
                                     TitleWidth="7.1"
                                     SortColumn="@nameof(Account.CreatedAt)"
                                     CurrentSortedColumn="@MainTableService.DataLoadingOptions.SortedColumn"
                                     CurrentSortDirection="@MainTableService.DataLoadingOptions.SortDirection"
                                     SortedColumnChanged="MainTableService.SortedColumnChangedAsync"
                                     SortDirectionChanged="MainTableService.SortDirectionChangedAsync" />
                    <MainTableHeader Title="Updated"
                                     TitleWidth="7.1"
                                     SortColumn="@nameof(Account.UpdatedAt)"
                                     CurrentSortedColumn="@MainTableService.DataLoadingOptions.SortedColumn"
                                     CurrentSortDirection="@MainTableService.DataLoadingOptions.SortDirection"
                                     SortedColumnChanged="MainTableService.SortedColumnChangedAsync"
                                     SortDirectionChanged="MainTableService.SortDirectionChangedAsync" />
                    <MainTableHeader Title="Password Updated"
                                     TitleWidth="7.1"
                                     SortColumn="@nameof(Account.PasswordUpdatedAt)"
                                     CurrentSortedColumn="@MainTableService.DataLoadingOptions.SortedColumn"
                                     CurrentSortDirection="@MainTableService.DataLoadingOptions.SortDirection"
                                     SortedColumnChanged="MainTableService.SortedColumnChangedAsync"
                                     SortDirectionChanged="MainTableService.SortDirectionChangedAsync" />
                    <MainTableHeader Title="Otp Updated"
                                     TitleWidth="7.1"
                                     CurrentSortedColumn="@MainTableService.DataLoadingOptions.SortedColumn"
                                     CurrentSortDirection="@MainTableService.DataLoadingOptions.SortDirection"
                                     SortedColumnChanged="MainTableService.SortedColumnChangedAsync"
                                     SortDirectionChanged="MainTableService.SortDirectionChangedAsync" />
                </TableHeader>
                <TableRow>
                    <td style="vertical-align:middle">
                        @if (context.Employee.PrimaryAccountId == context.Id)
                                {
                            <span class="badge @(MainTableService.SelectedEntity?.Id == context.Id ? "badge-light":"badge-success") custom-badge" title="Primary account">
                                @context.Name
                            </span>
                                }
                                else
                                {
                            @context.Name
                                }
                    </td>
                    <td>
                        @if (context.Urls != null)
                                {
                                    foreach (var urls in context.Urls.Split(';'))
                                    {
                                <span style="white-space: pre-line">@urls</span>
                                    }
                                }
                    </td>
                    <td>
                        @if (context.Apps != null)
                                {
                                    foreach (var apps in context.Apps.Split(';'))
                                    {
                                <span style="white-space: pre-line">@apps</span>

                                    }
                                }
                    </td>
                    <td>
                        @context.Login
                    </td>
                    <td>
                        @context.Type
                    </td>
                    <td>
                        @if (context.CreatedAt != null)
                                {
                            @context.CreatedAt.ToLocalTime()
                                }
                    </td>
                    <td>
                        @if (context.UpdatedAt != null)
                                {
                            @context.UpdatedAt.Value.ToLocalTime()
                                }
                    </td>
                    <td>
                        @((DateTime.UtcNow.Date - context.PasswordUpdatedAt.Date).TotalDays) @((DateTime.UtcNow.Date - context.PasswordUpdatedAt.Date).TotalDays == 1 ? " day" : " days" )
                    </td>
                    <td>
                        @if (context.OtpUpdatedAt != null)
                                {
                            @((DateTime.UtcNow.Date - context.OtpUpdatedAt.Value.Date).TotalDays) @((DateTime.UtcNow.Date - context.OtpUpdatedAt.Value.Date).TotalDays == 1 ? " day" : " days" )
                                }
                    </td>
                </TableRow>
            </MainTable>
            <Pagination CurrentPageChanged="MainTableService.CurrentPageChangedAsync"
                        DisplayRowsChanged="MainTableService.DisplayRowsChangedAsync"
                        TotalRecords="MainTableService.TotalRecords"
                        CurrentPage="MainTableService.CurrentPage"
                        DisplayRows="MainTableService.DataLoadingOptions.Take"
                        DisplayRecords="MainTableService.Entities.Count" />
        }
    </section>
}
else if (LoadFailed)
{
    <LoadingFailed ErrorMessage="@ErrorMessage" />
}
else
{
    <LoadingPage />
}