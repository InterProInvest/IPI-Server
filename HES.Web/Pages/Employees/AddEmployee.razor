@if (!Initialized)
{
    <LoadingText />
}
else
{
    switch (ActiveDirectoryInitialization)
    {
        case ActiveDirectoryInitialization.HostNotSet:
            <h5>To import users from the active directory, set domain settings on the parameters page.</h5>
            <div class="text-right  mt-4">
                <button type="button" class="btn btn-secondary btn-min-w" @onclick="@(async () => await ModalDialogService.CloseAsync())">Close</button>
            </div>
            break;
        case ActiveDirectoryInitialization.CredentialsNotSet:
            <HES.Web.Pages.Settings.Parameters.LdapCredentials Host="@LdapSettings.Host" LoadEntities="GetUsers" CancelRequested="ModalDialogService.CloseAsync" />
            break;
        case ActiveDirectoryInitialization.Loaded:   
            <div class="row">
                <div class="col-6">
                    <div class="has-search-right mb-2">
                        <div class="form-control-feedback">
                            <img class="img-size" src="/svg/icon-search.svg" />
                        </div>
                        <input type="text" class="form-control" placeholder="Search" @bind="SearchText" @bind:event="oninput" />
                    </div>
                    <div class="table-responsive">
                        <table class="table table-fixed-header table-hover border rounded mb-0 disable-selection">
                            <thead>
                                <tr class="cursor-pointer">
                                    <th>
                                        <div class="custom-control custom-checkbox">
                                            <input type="checkbox" class="custom-control-input" id="checkAll" @onchange="@((e) => { Users.ForEach(x => x.Checked = (bool)e.Value); })" />
                                            <label class="custom-control-label" for="checkAll"></label>
                                        </div>
                                    </th>
                                    <th @onclick="@(() => SortTable(nameof(Employee.FullName)))">
                                        <span class="w-100">
                                            Name
                                        </span>
                                        <img class="table-sort-arrow @GetSortIcon(nameof(Employee.FullName))" />
                                    </th>
                                </tr>
                            </thead>
                            <tbody style="max-height:50vh;">
                                @foreach (var user in Users.Where(x => x.Employee.FullName.Contains(SearchText, StringComparison.OrdinalIgnoreCase) || x.Checked))
                                {
                                    <tr @key="user.Employee.Id" @onclick="@(() => { user.Checked = !user.Checked; })">
                                        <td>
                                            <div class="custom-control custom-checkbox" @onclick:stopPropagation="true">
                                                <input type="checkbox" class="custom-control-input" id="@user.Employee.Id" @bind="user.Checked" />
                                                <label class="custom-control-label" for="@user.Employee.Id"></label>
                                            </div>
                                        </td>
                                        <td>
                                            @user.Employee.FullName
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                        <div class="text-center mt-2">Selected @Users.Where(x => x.Checked).Count() of @Users.Count() users</div>
                    </div>
                </div>
                <div class="col-6">
                    <Alert Message="@WarningMessage" />
                    <div class="d-flex flex-column h-100">
                        <div class="card mb-3">
                            <div class="card-body p-2">
                                <div class="custom-control custom-checkbox">
                                    <input type="checkbox" class="custom-control-input" id="createAccounts" @bind="CreateAccounts" />
                                    <label class="custom-control-label disable-selection" for="createAccounts">Import domain accounts</label>
                                </div>
                                <small class="form-text text-muted">Domain accounts will be imported for the selected users, passwords will be generated and recorded on the Hideez key and transferred to the Active Directory via LDAP. Domain accounts will be selected as primary accounts to unlock the PC.</small>
                            </div>
                        </div>
                        <div class="card mb-3">
                            <div class="card-body p-2">
                                <div class="custom-control custom-checkbox">
                                    <input type="checkbox" class="custom-control-input" id="createGroup" @bind="CreateGroups" />
                                    <label class="custom-control-label disable-selection" for="createGroup">Create groups</label>
                                </div>
                                <small class="form-text text-muted">For the selected users, groups will be created in which they belong in the active directory.</small>
                            </div>
                        </div>
                        <div class="text-right mt-auto">
                            <button type="button" class="btn btn-secondary btn-min-w" @onclick="@(async () => await ModalDialogService.CloseAsync())">Cancel</button>
                            <button type="button" class="btn btn-primary btn-min-w" @onclick="@(async () => await AddAsync())">
                                <span class="spinner-border spinner-border-sm @(IsBusy == true ? null : "d-none")" role="status" aria-hidden="true"></span>
                                <span>Add</span>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
            break;
    }
}
